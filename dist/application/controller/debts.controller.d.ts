import { ApiResponseDto } from '../dtos/common/api-response.dto';
import { PaginatedResponseDto, PaginationQueryDto } from '../dtos/common/pagination.dto';
import { CreateDebtUseCase } from '../use-cases/debt/create-debt.use-case';
import { DeleteDebtUseCase } from '../use-cases/debt/delete-debt.use-case';
import { GetDebtUseCase } from '../use-cases/debt/get-debt.use-case';
import { ListDebtsUseCase } from '../use-cases/debt/list-debts.use-case';
import { UpdateDebtUseCase } from '../use-cases/debt/update-debt.use-case';
import { MarkDebtSettledUseCase } from '../use-cases/debt/mark-debt-settled.use-case';
import { MarkDebtAlertSentUseCase } from '../use-cases/debt/mark-debt-alert-sent.use-case';
import { FindOverdueDebtsUseCase } from '../use-cases/debt/find-overdue-debts.use-case';
import { CreateDebtDto } from '../dtos/debt/create-debt.dto';
import { UpdateDebtDto } from '../dtos/debt/update-debt.dto';
import { DebtResponseDto } from '../dtos/debt/debt-response.dto';
export declare class DebtsController {
    private readonly createDebtUseCase;
    private readonly deleteDebtUseCase;
    private readonly getDebtUseCase;
    private readonly listDebtsUseCase;
    private readonly updateDebtUseCase;
    private readonly markDebtSettledUseCase;
    private readonly markDebtAlertSentUseCase;
    private readonly findOverdueDebtsUseCase;
    constructor(createDebtUseCase: CreateDebtUseCase, deleteDebtUseCase: DeleteDebtUseCase, getDebtUseCase: GetDebtUseCase, listDebtsUseCase: ListDebtsUseCase, updateDebtUseCase: UpdateDebtUseCase, markDebtSettledUseCase: MarkDebtSettledUseCase, markDebtAlertSentUseCase: MarkDebtAlertSentUseCase, findOverdueDebtsUseCase: FindOverdueDebtsUseCase);
    createDebt(createDebtDto: CreateDebtDto): Promise<ApiResponseDto<DebtResponseDto>>;
    getDebts(paginationQuery: PaginationQueryDto, customerId?: string, isSettled?: string, alertSent?: string, dueBefore?: string, dueAfter?: string): Promise<ApiResponseDto<PaginatedResponseDto<DebtResponseDto>>>;
    getAllDebts(): Promise<ApiResponseDto<DebtResponseDto[]>>;
    getOverdueDebts(): Promise<ApiResponseDto<DebtResponseDto[]>>;
    getDebtsByCustomer(customerId: number): Promise<ApiResponseDto<DebtResponseDto[]>>;
    getDebtByTransaction(transactionId: number): Promise<ApiResponseDto<DebtResponseDto>>;
    getDebtById(id: number): Promise<ApiResponseDto<DebtResponseDto>>;
    updateDebt(id: number, updateDebtDto: UpdateDebtDto): Promise<ApiResponseDto<DebtResponseDto>>;
    settleDebt(id: number): Promise<ApiResponseDto<DebtResponseDto>>;
    markAlertSent(id: number): Promise<ApiResponseDto<DebtResponseDto>>;
    deleteDebt(id: number): Promise<ApiResponseDto<boolean>>;
}
