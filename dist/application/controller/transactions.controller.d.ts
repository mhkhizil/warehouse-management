import { ApiResponseDto } from '../dtos/common/api-response.dto';
import { PaginatedResponseDto, PaginationQueryDto } from '../dtos/common/pagination.dto';
import { CreateTransactionUseCase } from '../use-cases/transaction/create-transaction.use-case';
import { DeleteTransactionUseCase } from '../use-cases/transaction/delete-transaction.use-case';
import { GetTransactionUseCase } from '../use-cases/transaction/get-transaction.use-case';
import { ListTransactionsUseCase } from '../use-cases/transaction/list-transactions.use-case';
import { UpdateTransactionUseCase } from '../use-cases/transaction/update-transaction.use-case';
import { GetTransactionReportUseCase } from '../use-cases/transaction/get-transaction-report.use-case';
import { CreateTransactionDto } from '../dtos/transaction/create-transaction.dto';
import { UpdateTransactionDto } from '../dtos/transaction/update-transaction.dto';
import { TransactionResponseDto } from '../dtos/transaction/transaction-response.dto';
export declare class TransactionsController {
    private readonly createTransactionUseCase;
    private readonly deleteTransactionUseCase;
    private readonly getTransactionUseCase;
    private readonly listTransactionsUseCase;
    private readonly updateTransactionUseCase;
    private readonly getTransactionReportUseCase;
    constructor(createTransactionUseCase: CreateTransactionUseCase, deleteTransactionUseCase: DeleteTransactionUseCase, getTransactionUseCase: GetTransactionUseCase, listTransactionsUseCase: ListTransactionsUseCase, updateTransactionUseCase: UpdateTransactionUseCase, getTransactionReportUseCase: GetTransactionReportUseCase);
    createTransaction(createTransactionDto: CreateTransactionDto): Promise<ApiResponseDto<TransactionResponseDto>>;
    getTransactions(paginationQuery: PaginationQueryDto, type?: string, itemId?: string, customerId?: string, stockId?: string, startDate?: string, endDate?: string, minAmount?: string, maxAmount?: string): Promise<ApiResponseDto<PaginatedResponseDto<TransactionResponseDto>>>;
    getAllTransactions(): Promise<ApiResponseDto<TransactionResponseDto[]>>;
    getSalesReport(startDate: string, endDate: string): Promise<ApiResponseDto<any>>;
    getPurchasesReport(startDate: string, endDate: string): Promise<ApiResponseDto<any>>;
    getTransactionsByCustomer(customerId: number): Promise<ApiResponseDto<TransactionResponseDto[]>>;
    getTransactionsByItem(itemId: number): Promise<ApiResponseDto<TransactionResponseDto[]>>;
    getTransactionById(id: number): Promise<ApiResponseDto<TransactionResponseDto>>;
    updateTransaction(id: number, updateTransactionDto: UpdateTransactionDto): Promise<ApiResponseDto<TransactionResponseDto>>;
    deleteTransaction(id: number): Promise<ApiResponseDto<boolean>>;
}
